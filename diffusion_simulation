{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": " diffusion sim with graphs",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyOrVurNfeDtCr9v4o9iQlZD",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/benjaminvyshedskiy/benjaminvyshedskiy/blob/main/diffusion_simulation\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RteDopv26AYI",
        "outputId": "a2fbaf0d-aa66-4bf2-bc21-633201f2c02d"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "how many molecules on the left side of the membrane? 1000\n",
            "how many molecules on the right side of the membrane? 1\n"
          ]
        }
      ],
      "source": [
        "import numpy as np\n",
        "leftside = int(input(\"how many molecules on the left side of the membrane? \"))\n",
        "rightside = int(input(\"how many molecules on the right side of the membrane? \"))\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "from numpy.lib.function_base import diff\n",
        "leftside =1000\n",
        "rightside = 1\n",
        "mu, sigma = -5, 1 # mean and standard deviation\n",
        "left = list(np.random.normal(mu, sigma, leftside))\n",
        "mu, sigma = 5, 1 # mean and standard deviation\n",
        "right = list(np.random.normal(mu, sigma, rightside))\n",
        "molecules = left+right\n",
        "\n",
        "\n",
        "def randommotion(list1):\n",
        "  mu, sigma = 0, 5 # mean and standard deviation\n",
        "  list2 = []\n",
        "  for i in list1:\n",
        "    change = list(np.random.normal(0, 1, 1))[0]\n",
        "    list2.append(i + change)\n",
        "  return(list2)\n",
        "leftdifferences = []\n",
        "rightdifferences = []\n",
        "numleft = []\n",
        "numright = []\n",
        "for k in range (1,2):\n",
        "  mu, sigma = -5, 1 # mean and standard deviation\n",
        "  left = list(np.random.normal(mu, sigma, leftside))\n",
        "  mu, sigma = 5, 1 # mean and standard deviation\n",
        "  right = list(np.random.normal(mu, sigma, rightside))\n",
        "  molecules = left+right\n",
        "  for j in range(1,1000):\n",
        "   molecules = randommotion(molecules)\n",
        "   counter1 = 0\n",
        "   for i in molecules:\n",
        "    if i>0:\n",
        "      counter1 +=1\n",
        "   numright.append(counter1)\n",
        "      \n",
        "  leftcount = 0\n",
        "  rightcount = 0\n",
        "  for i in molecules:\n",
        "    if i>0:\n",
        "      rightcount +=1\n",
        "    if i<0:\n",
        "      leftcount +=  1\n",
        "  differenceleft = (leftside - leftcount)\n",
        "  differenceright = (rightside - rightcount)\n",
        "  leftdifferences.append(differenceleft)\n",
        "  rightdifferences.append(differenceright)\n",
        "print(np.mean(leftdifferences))\n",
        "print(np.mean(rightdifferences))\n",
        "print(np.std(leftdifferences))\n",
        "print(np.std(rightdifferences))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fihN5OyK-DRa",
        "outputId": "8ebd0dd2-b69f-4580-835a-6c5a2906a998"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "425.0\n",
            "-425.0\n",
            "0.0\n",
            "0.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from matplotlib import pyplot as plt\n",
        "first500 =numright[0:999]\n",
        "plt.plot(first500)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "NetoXGNZJptH",
        "outputId": "f75ff79e-363e-4ab0-bf4b-61c642810507"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7fac4ed50390>]"
            ]
          },
          "metadata": {},
          "execution_count": 5
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}