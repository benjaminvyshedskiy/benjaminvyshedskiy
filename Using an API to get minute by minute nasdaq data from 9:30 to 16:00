{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "fucking with api",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/benjaminvyshedskiy/benjaminvyshedskiy/blob/main/Using%20an%20API%20to%20get%20minute%20by%20minute%20nasdaq%20data%20from%209%3A30%20to%2016%3A00\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0kLNxTXZ2Bgq",
        "outputId": "9c338492-47b0-4ae9-e048-9dc8b50c495d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: polygon-api-client in /usr/local/lib/python3.7/dist-packages (0.2.11)\n",
            "Requirement already satisfied: websockets>=8.0.2 in /usr/local/lib/python3.7/dist-packages (from polygon-api-client) (10.1)\n",
            "Requirement already satisfied: requests>=2.22.0 in /usr/local/lib/python3.7/dist-packages (from polygon-api-client) (2.23.0)\n",
            "Requirement already satisfied: websocket-client>=0.56.0 in /usr/local/lib/python3.7/dist-packages (from polygon-api-client) (1.2.3)\n",
            "Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests>=2.22.0->polygon-api-client) (3.0.4)\n",
            "Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests>=2.22.0->polygon-api-client) (2.10)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests>=2.22.0->polygon-api-client) (2021.10.8)\n",
            "Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests>=2.22.0->polygon-api-client) (1.24.3)\n",
            "Minute aggregates for QQQ between 2021-09-19 and 2021-09-20.\n"
          ]
        }
      ],
      "source": [
        "!pip install polygon-api-client\n",
        "import datetime\n",
        "import pandas as pd\n",
        "import statistics\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import random\n",
        "import matplotlib.pyplot as plt\n",
        "import sklearn\n",
        "from sklearn.model_selection import TimeSeriesSplit\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "from polygon import RESTClient\n",
        "\n",
        "listofresults = []\n",
        "def ts_to_datetime(ts) -> str:\n",
        "    return datetime.datetime.fromtimestamp(ts / 1000.0).strftime('%Y-%m-%d %H:%M')\n",
        "\n",
        "\n",
        "def main():\n",
        "    key = \"key\"\n",
        "\n",
        "    # RESTClient can be used as a context manager to facilitate closing the underlying http session\n",
        "    # https://requests.readthedocs.io/en/master/user/advanced/#session-objects\n",
        "    with RESTClient(key) as client:\n",
        "        from_ = \"2021-09-19\"\n",
        "        to = \"2021-09-20\"\n",
        "        resp = client.stocks_equities_aggregates(\"QQQ\", 1, \"minute\", from_, to, unadjusted=False, limit=50000)\n",
        "\n",
        "        print(f\"Minute aggregates for {resp.ticker} between {from_} and {to}.\")\n",
        "\n",
        "        for result in resp.results:\n",
        "            dt = ts_to_datetime(result[\"t\"])\n",
        "            listofresults.append(list((dt, result['o'], result['h'], result['l'], result['c'],result[\"v\"],result[\"vw\"],result[\"n\"])))\n",
        "            Data = pd.DataFrame(listofresults, columns=[\"t\",'o',\"h\",\"l\",\"c\",\"v\",\"vw\",\"n\"])\n",
        "\n",
        "\n",
        "if __name__ == '__main__':\n",
        "    main()\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "import base64\n",
        "import pandas as pd\n",
        "from IPython.display import HTML\n",
        "\n",
        "def create_download_link( df, title = \"Download CSV file\", filename = \"data.csv\"):\n",
        "    csv = df.to_csv()\n",
        "    b64 = base64.b64encode(csv.encode())\n",
        "    payload = b64.decode()\n",
        "    html = '<a download=\"{filename}\" href=\"data:text/csv;base64,{payload}\" target=\"_blank\">{title}</a>'\n",
        "    html = html.format(payload=payload,title=title,filename=filename)\n",
        "    return HTML(html)\n",
        "\n",
        "create_download_link(Data)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 200
        },
        "id": "uwiuofGW_vTy",
        "outputId": "9c4049ab-c4cb-4085-fb38-38dd4a12f4a0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-4-29c9b38ee012>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     12\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mHTML\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhtml\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 14\u001b[0;31m \u001b[0mcreate_download_link\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mData\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'Data' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import datetime\n",
        "import pandas as pd\n",
        "import datetime\n",
        "import pandas as pd\n",
        "import statistics\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import random\n",
        "import matplotlib.pyplot as plt\n",
        "import sklearn\n",
        "from sklearn.model_selection import TimeSeriesSplit\n",
        "from sklearn.model_selection import train_test_split\n"
      ],
      "metadata": {
        "id": "nekDXhRS7V2D"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Data = pd.DataFrame(listofresults, columns=[\"t\",'o',\"h\",\"l\",\"c\",\"v\",\"vw\",\"n\"]) \n",
        "#turn off the other one if you are actually loading data, \n",
        "#the other line is for testing on data u sent me\n",
        "prices = pd.read_csv(\"/content/nasdaqminutedatasep192021-dec122021.csv\")\n",
        "prices = prices.set_index(pd.DatetimeIndex(prices['t'])).between_time('09:30:00','16:00:00')[['o',\"h\",\"l\",\"c\",\"v\",\"vw\",\"n\"]]#possibly can delete this and just have it do whole df... idrk...\n",
        "prices.reset_index(inplace = True)\n",
        "\n",
        "def shift(column,shift):\n",
        "  x = list(prices[column])\n",
        "  for i in range(0,shift):\n",
        "    x.insert(0, 0)\n",
        "    x.pop()\n",
        "  return(pd.DataFrame(x))\n",
        "prices[\"previousclose\"] = shift(\"c\",1)\n",
        "prices[\"changefromclose\"]  =  -(prices[\"c\"]-prices[\"previousclose\"])/prices[\"previousclose\"]*100\n",
        "prices[\"previousvolume\"] = shift(\"v\",1)\n",
        "prices[\"changefromvolume\"] =  -(prices[\"v\"]-prices[\"previousvolume\"])/prices[\"previousvolume\"]*100\n",
        "prices[\"previousOpen\"] = shift(\"o\",1)\n",
        "prices[\"changefromopen\"] =  -(prices[\"o\"]-prices[\"previousOpen\"])/prices[\"previousOpen\"]*100\n",
        "prices[\"previousHigh\"] = shift(\"h\",1)\n",
        "prices[\"changefromHigh\"] =  -(prices[\"h\"]-prices[\"previousHigh\"])/prices[\"previousHigh\"]*100\n",
        "prices[\"previousLow\"] = shift(\"l\",1)\n",
        "prices[\"changefromLow\"] = - (prices[\"l\"]-prices[\"previousLow\"])/prices[\"previousLow\"]*100\n",
        "prices[\"previousvw\"]  = shift(\"vw\",1)\n",
        "prices[\"changefromvw\"] =  -(prices[\"vw\"]-prices[\"previousvw\"])/prices[\"previousvw\"]*100\n",
        "prices[\"previousn\"]  = shift(\"n\",1)\n",
        "prices[\"changefromn\"] =-(prices[\"n\"]-prices[\"previousn\"])/prices[\"previousn\"]*100\n",
        "\n",
        "\n",
        "prices[\"changefromclose1\"] = shift(\"changefromclose\",1)\n",
        "prices[\"changefromclose2\"] = shift(\"changefromclose\",2)\n",
        "prices[\"changefromclose3\"] = shift(\"changefromclose\",3)\n",
        "prices[\"changefromclose4\"] = shift(\"changefromclose\",4)\n",
        "prices[\"changefromclose5\"] = shift(\"changefromclose\",5)\n",
        "prices[\"changefromclose6\"] = shift(\"changefromclose\",6)\n",
        "prices[\"changefromclose7\"] = shift(\"changefromclose\",7)\n",
        "prices[\"2derivativefromclose12\"] = (prices[\"changefromclose1\"]-prices[\"changefromclose2\"])/prices[\"changefromclose2\"]*100\n",
        "prices[\"2derivativefromclose23\"] = (prices[\"changefromclose2\"]-prices[\"changefromclose3\"])/prices[\"changefromclose3\"]*100\n",
        "prices[\"2derivativefromclose34\"] = (prices[\"changefromclose3\"]-prices[\"changefromclose4\"])/prices[\"changefromclose4\"]*100\n",
        "\n",
        "prices[\"changefromvolume1\"] = shift(\"changefromvolume\",1)\n",
        "prices[\"changefromvolume2\"] = shift(\"changefromvolume\",2)\n",
        "prices[\"changefromvolume3\"] = shift(\"changefromvolume\",3)\n",
        "prices[\"changefromvolume4\"] = shift(\"changefromvolume\",4)\n",
        "prices[\"changefromvolume5\"] = shift(\"changefromvolume\",5)\n",
        "prices[\"changefromvolume6\"] = shift(\"changefromvolume\",6)\n",
        "prices[\"changefromvolume7\"] = shift(\"changefromvolume\",7)\n",
        "prices[\"2derivativefromvolume12\"] = (prices[\"changefromvolume1\"]-prices[\"changefromvolume2\"])/prices[\"changefromvolume2\"]*100\n",
        "prices[\"2derivativefromvolume23\"] = (prices[\"changefromvolume2\"]-prices[\"changefromvolume3\"])/prices[\"changefromvolume3\"]*100\n",
        "prices[\"2derivativefromvolume34\"] = (prices[\"changefromvolume3\"]-prices[\"changefromvolume4\"])/prices[\"changefromvolume4\"]*100\n",
        "\n",
        "prices[\"changefromopen1\"] = shift(\"changefromopen\",1)\n",
        "prices[\"changefromopen2\"] = shift(\"changefromopen\",2)\n",
        "prices[\"changefromopen3\"] = shift(\"changefromopen\",3)\n",
        "prices[\"changefromopen4\"] = shift(\"changefromopen\",4)\n",
        "prices[\"changefromopen5\"] = shift(\"changefromopen\",5)\n",
        "prices[\"changefromopen6\"] = shift(\"changefromopen\",6)\n",
        "prices[\"changefromopen7\"] = shift(\"changefromopen\",7)\n",
        "prices[\"2derivativefromopen12\"] = (prices[\"changefromopen1\"]-prices[\"changefromopen2\"])/prices[\"changefromopen2\"]*100\n",
        "prices[\"2derivativefromopen23\"] = (prices[\"changefromopen2\"]-prices[\"changefromopen3\"])/prices[\"changefromopen3\"]*100\n",
        "prices[\"2derivativefromopen34\"] = (prices[\"changefromopen3\"]-prices[\"changefromopen4\"])/prices[\"changefromopen4\"]*100\n",
        "\n",
        "prices[\"changefromHigh1\"] = shift(\"changefromHigh\",1)\n",
        "prices[\"changefromHigh2\"] = shift(\"changefromHigh\",2)\n",
        "prices[\"changefromHigh3\"] = shift(\"changefromHigh\",3)\n",
        "prices[\"changefromHigh4\"] = shift(\"changefromHigh\",4)\n",
        "prices[\"changefromHigh5\"] = shift(\"changefromHigh\",5)\n",
        "prices[\"changefromHigh6\"] = shift(\"changefromHigh\",6)\n",
        "prices[\"changefromHigh7\"] = shift(\"changefromHigh\",7)\n",
        "prices[\"2derivativefromHigh12\"] = (prices[\"changefromHigh1\"]-prices[\"changefromHigh2\"])/prices[\"changefromHigh2\"]*100\n",
        "prices[\"2derivativefromHigh23\"] = (prices[\"changefromHigh2\"]-prices[\"changefromHigh3\"])/prices[\"changefromHigh3\"]*100\n",
        "prices[\"2derivativefromHigh34\"] = (prices[\"changefromHigh3\"]-prices[\"changefromHigh4\"])/prices[\"changefromHigh4\"]*100\n",
        "\n",
        "prices[\"changefromLow1\"] = shift(\"changefromLow\",1)\n",
        "prices[\"changefromLow2\"] = shift(\"changefromLow\",2)\n",
        "prices[\"changefromLow3\"] = shift(\"changefromLow\",3)\n",
        "prices[\"changefromLow4\"] = shift(\"changefromLow\",4)\n",
        "prices[\"changefromLow5\"] = shift(\"changefromLow\",5)\n",
        "prices[\"changefromLow6\"] = shift(\"changefromLow\",6)\n",
        "prices[\"changefromLow7\"] = shift(\"changefromLow\",7)\n",
        "prices[\"2derivativefromLow12\"] = (prices[\"changefromLow1\"]-prices[\"changefromLow2\"])/prices[\"changefromLow2\"]*100\n",
        "prices[\"2derivativefromLow23\"] = (prices[\"changefromLow2\"]-prices[\"changefromLow3\"])/prices[\"changefromLow3\"]*100\n",
        "prices[\"2derivativefromLow34\"] = (prices[\"changefromLow3\"]-prices[\"changefromLow4\"])/prices[\"changefromLow4\"]*100\n",
        "\n",
        "prices[\"changefromvw1\"] = shift(\"changefromvw\",1)\n",
        "prices[\"changefromvw2\"] = shift(\"changefromvw\",2)\n",
        "prices[\"changefromvw3\"] = shift(\"changefromvw\",3)\n",
        "prices[\"changefromvw4\"] = shift(\"changefromvw\",4)\n",
        "prices[\"changefromvw5\"] = shift(\"changefromvw\",5)\n",
        "prices[\"changefromvw6\"] = shift(\"changefromvw\",6)\n",
        "prices[\"changefromvw7\"] = shift(\"changefromvw\",7)\n",
        "prices[\"2derivativefromvw12\"] = (prices[\"changefromvw1\"]-prices[\"changefromvw2\"])/prices[\"changefromvw2\"]*100\n",
        "prices[\"2derivativefromvw23\"] = (prices[\"changefromvw2\"]-prices[\"changefromvw3\"])/prices[\"changefromvw3\"]*100\n",
        "prices[\"2derivativefromvw34\"] = (prices[\"changefromvw3\"]-prices[\"changefromvw4\"])/prices[\"changefromvw4\"]*100\n",
        "\n",
        "prices[\"changefromn1\"] = shift(\"changefromn\",1)\n",
        "prices[\"changefromn2\"] = shift(\"changefromn\",2)\n",
        "prices[\"changefromn3\"] = shift(\"changefromn\",3)\n",
        "prices[\"changefromn4\"] = shift(\"changefromn\",4)\n",
        "prices[\"changefromn5\"] = shift(\"changefromn\",5)\n",
        "prices[\"changefromn6\"] = shift(\"changefromn\",6)\n",
        "prices[\"changefromn7\"] = shift(\"changefromn\",7)\n",
        "prices[\"2derivativefromn12\"] = (prices[\"changefromn1\"]-prices[\"changefromn2\"])/prices[\"changefromn2\"]*100\n",
        "prices[\"2derivativefromn23\"] = (prices[\"changefromn2\"]-prices[\"changefromn3\"])/prices[\"changefromn3\"]*100\n",
        "prices[\"2derivativefromn34\"] = (prices[\"changefromn3\"]-prices[\"changefromn4\"])/prices[\"changefromn4\"]*100\n",
        "prices.replace([np.inf, -np.inf], np.nan, inplace=True)\n",
        "prices.dropna(inplace = True)\n",
        "\n",
        "positivereturn = []\n",
        "for i in list(prices[\"changefromclose\"]):\n",
        "  if i>=0: positivereturn.append(1)\n",
        "  if i<0: positivereturn.append(0)\n",
        "  else: continue\n",
        "prices = prices.iloc[:,22:92].copy()\n",
        "prices = prices.to_numpy()\n",
        "prices\n",
        "#create_download_link(prices)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0BD5ue908Z_6",
        "outputId": "74c766c4-5b6d-4c9c-ef8e-354c134ab7b8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[-4.06272853e-02,  2.16631915e-02,  2.70782562e-03, ...,\n",
              "        -2.77777778e+01,  6.41025641e+01, -1.31250000e+02],\n",
              "       [ 4.06107862e-02, -4.06272853e-02,  2.16631915e-02, ...,\n",
              "        -8.71428571e+02, -2.77777778e+01,  6.41025641e+01],\n",
              "       [ 6.77121421e-02,  4.06107862e-02, -4.06272853e-02, ...,\n",
              "         1.64035088e+02, -8.71428571e+02, -2.77777778e+01],\n",
              "       ...,\n",
              "       [-1.28057370e-02,  3.58432116e-02,  2.30367564e-02, ...,\n",
              "        -3.00956938e+02, -2.66666667e+01, -2.16666667e+02],\n",
              "       [ 5.12163892e-03, -1.28057370e-02,  3.58432116e-02, ...,\n",
              "        -1.32900433e+02, -3.00956938e+02, -2.66666667e+01],\n",
              "       [-2.56095062e-03,  5.12163892e-03, -1.28057370e-02, ...,\n",
              "         4.85000000e+01, -1.32900433e+02, -3.00956938e+02]])"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "counter = 0\n",
        "for i in positivereturn:\n",
        "  if i>0:\n",
        "    counter +=1\n",
        "counter/len(positivereturn)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yjTf03FFirMT",
        "outputId": "544c3eb8-c454-4e3a-8357-0e34f11c0593"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.5148879485973985"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X_train, X_test, y_train, y_test =train_test_split(prices, positivereturn, test_size=0.5, random_state=1)"
      ],
      "metadata": {
        "id": "QArXRy3DcZo6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from matplotlib.colors import ListedColormap\n",
        "from sklearn.metrics import *\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.datasets import make_moons, make_circles, make_classification\n",
        "from sklearn.neural_network import MLPClassifier\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.gaussian_process import GaussianProcessClassifier\n",
        "from sklearn.gaussian_process.kernels import RBF\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier\n",
        "from sklearn.naive_bayes import GaussianNB\n",
        "from sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis\n",
        "classifiers = [\n",
        "    KNeighborsClassifier(67),\n",
        " \n",
        "\n",
        "    DecisionTreeClassifier(max_depth=5),\n",
        "    RandomForestClassifier(max_depth=5, n_estimators=10, max_features=1),\n",
        "    MLPClassifier(alpha=1, max_iter=1000),\n",
        "    AdaBoostClassifier(),\n",
        "    GaussianNB(),\n",
        "    QuadraticDiscriminantAnalysis()]\n",
        "for classifier in classifiers:\n",
        "  model = classifier\n",
        "  model.fit(X_train, y_train)\n",
        "  y_pred = model.predict(X_test)\n",
        "  accuracy = accuracy_score(y_test,y_pred)\n",
        "  print (accuracy, classifier)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "O9qGvpRjcZrA",
        "outputId": "adb09ffb-4a04-404e-89e8-2d2bc54fa591"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.5024290863501019 KNeighborsClassifier(n_neighbors=67)\n",
            "0.5014887948597399 DecisionTreeClassifier(max_depth=5)\n",
            "0.5019589406049209 RandomForestClassifier(max_depth=5, max_features=1, n_estimators=10)\n",
            "0.5116752860053283 MLPClassifier(alpha=1, max_iter=1000)\n",
            "0.4928694561980881 AdaBoostClassifier()\n",
            "0.5133991537376587 GaussianNB()\n",
            "0.5133991537376587 QuadraticDiscriminantAnalysis()\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "### YOUR CODE HERE\n",
        "layer_sizes=[(10,10),(64,32),(32,64),(5,10),(10,5),(10,2)]\n",
        "for i in layer_sizes:\n",
        "  nnet = MLPClassifier(hidden_layer_sizes=i, max_iter= 10000000,random_state=100)  ## How many hidden layers? How many neurons does this have?\n",
        "  nnet.fit(X_train, y_train)\n",
        "\n",
        "# Predict what the classes are based on the testing data\n",
        "  predictions = nnet.predict(X_test)\n",
        "\n",
        "# Print the score on the testing data\n",
        "  print(\"MLP Testing Set Score:\")\n",
        "  print(accuracy_score(y_test, predictions)*100,i)\n",
        "### END CODE"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CfMeIpMwkWNO",
        "outputId": "cfe18965-fe15-44ea-c5d7-4be18fa6cbae"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "MLP Testing Set Score:\n",
            "51.198871650211565 (10, 10)\n",
            "MLP Testing Set Score:\n",
            "49.349631719166275 (64, 32)\n",
            "MLP Testing Set Score:\n",
            "49.28694561980881 (32, 64)\n",
            "MLP Testing Set Score:\n",
            "50.43096693308259 (5, 10)\n",
            "MLP Testing Set Score:\n",
            "51.4652875724808 (10, 5)\n",
            "MLP Testing Set Score:\n",
            "51.3712584234446 (10, 2)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import torch\n",
        "from torch import nn\n",
        "from torch import optim\n",
        "\n",
        "import matplotlib as mpl\n",
        "from matplotlib import pyplot as plt\n",
        "class DeepNet(nn.Module):\n",
        "\n",
        "  def __init__(self):\n",
        "    super().__init__()\n",
        "    self.in_layer = nn.Linear(70,112)\n",
        "    self.lay2 = nn.Linear(112,224)\n",
        "    self.lay3 = nn.Linear(224,112)\n",
        "    self.lay4 = nn.Linear(112,56)\n",
        "    self.out_layer = nn.Linear(56,1)\n",
        "\n",
        "  def forward(self,d):\n",
        "    x = torch.relu(self.in_layer(d))\n",
        "    x = torch.relu(self.lay2(x))\n",
        "    x = torch.relu(self.lay3(x))\n",
        "    x = torch.relu(self.lay4(x))\n",
        "    x = torch.sigmoid(self.out_layer(x))\n",
        "    return x\n",
        "np.random.seed(1)\n",
        "torch.manual_seed(1)\n",
        "\n",
        "net = DeepNet()\n",
        "#x_np = torch.tensor(X_train[2], dtype=torch.float32)\n",
        "#out = net(x_np)\n",
        "#print(X_train[2])\n",
        "#print(y_train[2])\n",
        "#out"
      ],
      "metadata": {
        "id": "TNcRjwJLko30"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "def train(net, loss_fn, train_data, train_labels,tdata,tlabels, n_epochs=500, learning_rate=1e-4, ):\n",
        "  optimizer = optim.SGD(net.parameters(), lr=learning_rate, weight_decay=1e-4)\n",
        "  train_loss = []\n",
        "  test_loss = []\n",
        "  x_np = torch.tensor(train_data, dtype=torch.float32)\n",
        "  y_np = torch.tensor(train_labels, dtype=torch.float32)\n",
        "  xt_np = torch.tensor(tdata, dtype=torch.float32)\n",
        "  yt_np = torch.tensor(tlabels, dtype=torch.float32)\n",
        "  for i in range(n_epochs):\n",
        "    out = net(x_np)\n",
        "    testout = net(xt_np)\n",
        "    loss = loss_fn(out, y_np)\n",
        "    testloss = loss_fn(testout, yt_np)\n",
        "    optimizer.zero_grad()\n",
        "    loss.backward()\n",
        "    optimizer.step()\n",
        "    train_loss.append(loss.item())\n",
        "    test_loss.append(testloss.item())\n",
        "\n",
        "  return train_loss, test_loss, testout, yt_np\n"
      ],
      "metadata": {
        "id": "VBYx55uCk3Sr"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import *\n",
        "np.random.seed(6)\n",
        "torch.manual_seed(6)\n",
        "net = DeepNet()\n",
        "loss_fn = nn.MSELoss()\n",
        "loss, testloss, testout, yt_np = train(net,loss_fn,X_train,y_train,X_test,y_test)\n",
        "plt.plot(loss)\n",
        "plt.plot(testloss)\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 320
        },
        "id": "2CgzMPJ6k4Ef",
        "outputId": "a3c009ab-0b4c-4d94-c656-bdc3faed4e07"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/torch/nn/modules/loss.py:520: UserWarning: Using a target size (torch.Size([6381])) that is different to the input size (torch.Size([6381, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n",
            "  return F.mse_loss(input, target, reduction=self.reduction)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "yt_np = yt_np.detach().numpy()\n",
        "accuracy_score(testout,yt_np)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 329
        },
        "id": "pjKtsH20k7qS",
        "outputId": "9e366a2c-fa83-4033-ad1c-98e7812dfc8f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "RuntimeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mRuntimeError\u001b[0m                              Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-21-b23324aace8f>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0myt_np\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0myt_np\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdetach\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnumpy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0maccuracy_score\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtestout\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0myt_np\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py\u001b[0m in \u001b[0;36maccuracy_score\u001b[0;34m(y_true, y_pred, normalize, sample_weight)\u001b[0m\n\u001b[1;32m    203\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    204\u001b[0m     \u001b[0;31m# Compute accuracy for each possible representation\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 205\u001b[0;31m     \u001b[0my_type\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_check_targets\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    206\u001b[0m     \u001b[0mcheck_consistent_length\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msample_weight\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    207\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0my_type\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstartswith\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"multilabel\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py\u001b[0m in \u001b[0;36m_check_targets\u001b[0;34m(y_true, y_pred)\u001b[0m\n\u001b[1;32m     83\u001b[0m     \"\"\"\n\u001b[1;32m     84\u001b[0m     \u001b[0mcheck_consistent_length\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 85\u001b[0;31m     \u001b[0mtype_true\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtype_of_target\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_true\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     86\u001b[0m     \u001b[0mtype_pred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtype_of_target\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_pred\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     87\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/utils/multiclass.py\u001b[0m in \u001b[0;36mtype_of_target\u001b[0;34m(y)\u001b[0m\n\u001b[1;32m    277\u001b[0m         \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"y cannot be class 'SparseSeries' or 'SparseArray'\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    278\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 279\u001b[0;31m     \u001b[0;32mif\u001b[0m \u001b[0mis_multilabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    280\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0;34m\"multilabel-indicator\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    281\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/utils/multiclass.py\u001b[0m in \u001b[0;36mis_multilabel\u001b[0;34m(y)\u001b[0m\n\u001b[1;32m    149\u001b[0m             \u001b[0mwarnings\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msimplefilter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"error\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mVisibleDeprecationWarning\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    150\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 151\u001b[0;31m                 \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    152\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mVisibleDeprecationWarning\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    153\u001b[0m                 \u001b[0;31m# dtype=object should be provided explicitly for ragged arrays,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/numpy/core/_asarray.py\u001b[0m in \u001b[0;36masarray\u001b[0;34m(a, dtype, order)\u001b[0m\n\u001b[1;32m     81\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     82\u001b[0m     \"\"\"\n\u001b[0;32m---> 83\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0morder\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0morder\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     84\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     85\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/_tensor.py\u001b[0m in \u001b[0;36m__array__\u001b[0;34m(self, dtype)\u001b[0m\n\u001b[1;32m    676\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mhandle_torch_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mTensor\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__array__\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    677\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mdtype\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 678\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnumpy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    679\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    680\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnumpy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mRuntimeError\u001b[0m: Can't call numpy() on Tensor that requires grad. Use tensor.detach().numpy() instead."
          ]
        }
      ]
    }
  ]
}