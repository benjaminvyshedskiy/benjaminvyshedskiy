{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "actually buying the dip",
      "provenance": [],
      "authorship_tag": "ABX9TyMegn15tEAeVsgL3gXa723g",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/benjaminvyshedskiy/benjaminvyshedskiy/blob/main/Investing%20in%20tqqq%20vs%20qqq%20for%20randomly%20picked%201%20year%20time%20periods\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "SNzho-lNyoyJ",
        "outputId": "364dc46b-ffaa-4a2e-cee3-1205e7520ab5"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-d179634e-d232-40d0-a82d-d3fd9e1e3c07\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Date</th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "      <th>Adj Close</th>\n",
              "      <th>Volume</th>\n",
              "      <th>change</th>\n",
              "      <th>previousclose</th>\n",
              "      <th>changefromclose</th>\n",
              "      <th>tqqq</th>\n",
              "      <th>10</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2000-01-03</td>\n",
              "      <td>4186.189941</td>\n",
              "      <td>4192.189941</td>\n",
              "      <td>3989.709961</td>\n",
              "      <td>4131.149902</td>\n",
              "      <td>4131.149902</td>\n",
              "      <td>1510070000</td>\n",
              "      <td>-1.314800</td>\n",
              "      <td>100.000000</td>\n",
              "      <td>4031.149902</td>\n",
              "      <td>12093.449706</td>\n",
              "      <td>40311.499020</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2000-01-04</td>\n",
              "      <td>4020.000000</td>\n",
              "      <td>4073.250000</td>\n",
              "      <td>3898.229980</td>\n",
              "      <td>3901.689941</td>\n",
              "      <td>3901.689941</td>\n",
              "      <td>1511840000</td>\n",
              "      <td>-2.943036</td>\n",
              "      <td>4131.149902</td>\n",
              "      <td>-5.554385</td>\n",
              "      <td>-16.663154</td>\n",
              "      <td>-55.543848</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2000-01-05</td>\n",
              "      <td>3854.350098</td>\n",
              "      <td>3924.209961</td>\n",
              "      <td>3734.870117</td>\n",
              "      <td>3877.540039</td>\n",
              "      <td>3877.540039</td>\n",
              "      <td>1735670000</td>\n",
              "      <td>0.601656</td>\n",
              "      <td>3901.689941</td>\n",
              "      <td>-0.618960</td>\n",
              "      <td>-1.856880</td>\n",
              "      <td>-6.189600</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2000-01-06</td>\n",
              "      <td>3834.439941</td>\n",
              "      <td>3868.760010</td>\n",
              "      <td>3715.620117</td>\n",
              "      <td>3727.129883</td>\n",
              "      <td>3727.129883</td>\n",
              "      <td>1598320000</td>\n",
              "      <td>-2.798585</td>\n",
              "      <td>3877.540039</td>\n",
              "      <td>-3.879010</td>\n",
              "      <td>-11.637029</td>\n",
              "      <td>-38.790097</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2000-01-07</td>\n",
              "      <td>3711.090088</td>\n",
              "      <td>3882.669922</td>\n",
              "      <td>3711.090088</td>\n",
              "      <td>3882.620117</td>\n",
              "      <td>3882.620117</td>\n",
              "      <td>1634930000</td>\n",
              "      <td>4.622093</td>\n",
              "      <td>3727.129883</td>\n",
              "      <td>4.171849</td>\n",
              "      <td>12.515547</td>\n",
              "      <td>41.718491</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5531</th>\n",
              "      <td>2021-12-27</td>\n",
              "      <td>15696.830078</td>\n",
              "      <td>15871.400391</td>\n",
              "      <td>15696.830078</td>\n",
              "      <td>15871.259766</td>\n",
              "      <td>15871.259766</td>\n",
              "      <td>3730120000</td>\n",
              "      <td>1.111241</td>\n",
              "      <td>15653.370117</td>\n",
              "      <td>1.391966</td>\n",
              "      <td>4.175899</td>\n",
              "      <td>13.919664</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5532</th>\n",
              "      <td>2021-12-28</td>\n",
              "      <td>15895.200195</td>\n",
              "      <td>15901.469727</td>\n",
              "      <td>15757.070313</td>\n",
              "      <td>15781.719727</td>\n",
              "      <td>15781.719727</td>\n",
              "      <td>3623600000</td>\n",
              "      <td>-0.713929</td>\n",
              "      <td>15871.259766</td>\n",
              "      <td>-0.564165</td>\n",
              "      <td>-1.692494</td>\n",
              "      <td>-5.641647</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5533</th>\n",
              "      <td>2021-12-29</td>\n",
              "      <td>15794.919922</td>\n",
              "      <td>15821.809570</td>\n",
              "      <td>15679.849609</td>\n",
              "      <td>15766.219727</td>\n",
              "      <td>15766.219727</td>\n",
              "      <td>3694500000</td>\n",
              "      <td>-0.181705</td>\n",
              "      <td>15781.719727</td>\n",
              "      <td>-0.098215</td>\n",
              "      <td>-0.294645</td>\n",
              "      <td>-0.982149</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5534</th>\n",
              "      <td>2021-12-30</td>\n",
              "      <td>15758.980469</td>\n",
              "      <td>15868.089844</td>\n",
              "      <td>15729.160156</td>\n",
              "      <td>15741.559570</td>\n",
              "      <td>15741.559570</td>\n",
              "      <td>3732730000</td>\n",
              "      <td>-0.110546</td>\n",
              "      <td>15766.219727</td>\n",
              "      <td>-0.156411</td>\n",
              "      <td>-0.469234</td>\n",
              "      <td>-1.564113</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5535</th>\n",
              "      <td>2021-12-31</td>\n",
              "      <td>15722.910156</td>\n",
              "      <td>15777.429688</td>\n",
              "      <td>15643.940430</td>\n",
              "      <td>15644.969727</td>\n",
              "      <td>15644.969727</td>\n",
              "      <td>3379850000</td>\n",
              "      <td>-0.495712</td>\n",
              "      <td>15741.559570</td>\n",
              "      <td>-0.613598</td>\n",
              "      <td>-1.840793</td>\n",
              "      <td>-6.135977</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5536 rows Ã— 12 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d179634e-d232-40d0-a82d-d3fd9e1e3c07')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-d179634e-d232-40d0-a82d-d3fd9e1e3c07 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-d179634e-d232-40d0-a82d-d3fd9e1e3c07');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "            Date          Open  ...          tqqq            10\n",
              "0     2000-01-03   4186.189941  ...  12093.449706  40311.499020\n",
              "1     2000-01-04   4020.000000  ...    -16.663154    -55.543848\n",
              "2     2000-01-05   3854.350098  ...     -1.856880     -6.189600\n",
              "3     2000-01-06   3834.439941  ...    -11.637029    -38.790097\n",
              "4     2000-01-07   3711.090088  ...     12.515547     41.718491\n",
              "...          ...           ...  ...           ...           ...\n",
              "5531  2021-12-27  15696.830078  ...      4.175899     13.919664\n",
              "5532  2021-12-28  15895.200195  ...     -1.692494     -5.641647\n",
              "5533  2021-12-29  15794.919922  ...     -0.294645     -0.982149\n",
              "5534  2021-12-30  15758.980469  ...     -0.469234     -1.564113\n",
              "5535  2021-12-31  15722.910156  ...     -1.840793     -6.135977\n",
              "\n",
              "[5536 rows x 12 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ],
      "source": [
        "import statistics\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import random\n",
        "import matplotlib.pyplot as plt\n",
        "prices = pd.read_csv(\"/content/^IXIC (4).csv\")\n",
        "prices[\"change\"] = (prices[\"Close\"]-prices[\"Open\"])/prices[\"Open\"]*100\n",
        "previousclose = list(prices[\"Close\"])\n",
        "previousclose.insert(0, 100)\n",
        "previousclose.remove(previousclose[len(previousclose)-1])\n",
        "prices[\"previousclose\"] = pd.DataFrame(previousclose)\n",
        "prices[\"changefromclose\"] =  (prices[\"Close\"]-prices[\"previousclose\"])/prices[\"previousclose\"]*100\n",
        "prices[\"tqqq\"] = prices[\"changefromclose\"]*3\n",
        "prices[\"10\"] = prices[\"changefromclose\"]*10\n",
        "prices"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "lisvaluenomanagment=[]\n",
        "lisvalueyesmanagment=[]\n",
        "lisvaluenomanagmentqqq=[]\n",
        "lisvalueyesmanagmentqqq=[]\n",
        "areyouwinningson = 0\n",
        "for counter2 in range(0,1000):\n",
        "  randomchoice = random.randint(0, len(prices)-251)\n",
        "  year = prices.iloc[randomchoice:randomchoice+250]\n",
        "  valuenomanagment = 100\n",
        "  valuenomanagmentqqq = 100\n",
        "  valueyesmanagment = 100\n",
        "  valueyesmanagmentqqq = 100\n",
        "  for i in year[\"changefromclose\"]:\n",
        "    valuenomanagment = valuenomanagment*((100+i)/100)\n",
        "  for i in year[\"tqqq\"]:\n",
        "    valuenomanagmentqqq = valuenomanagmentqqq*((100+i)/100)\n",
        "  for i in range(0,len(year)-1):\n",
        "    if list(year[\"changefromclose\"])[i]<3.4:\n",
        "      valueyesmanagment = valueyesmanagment*((list(year[\"changefromclose\"])[i+1]+100)/100)\n",
        "    else: continue\n",
        "  for i in range(0,len(year)-1):\n",
        "    if list(year[\"changefromclose\"])[i]<3.4:\n",
        "      valueyesmanagmentqqq = valueyesmanagmentqqq*((list(year[\"tqqq\"])[i+1]+100)/100)\n",
        "    else: continue\n",
        "  valueyesmanagmentqqq = valueyesmanagmentqqq*0.98\n",
        "  valuenomanagmentqqq = valuenomanagmentqqq*0.98\n",
        "\n",
        "  lisvaluenomanagment.append((valuenomanagment))\n",
        "  lisvalueyesmanagment.append((valueyesmanagment))\n",
        "  lisvaluenomanagmentqqq.append((valuenomanagmentqqq))\n",
        "  lisvalueyesmanagmentqqq.append((valueyesmanagmentqqq))\n",
        "  if valueyesmanagmentqqq > valuenomanagment:\n",
        "    areyouwinningson += 1\n",
        "print(np.mean(lisvaluenomanagment))\n",
        "print(statistics.median((lisvaluenomanagment)))\n",
        "print(np.std(lisvaluenomanagment))\n",
        "print(np.mean(lisvalueyesmanagment))\n",
        "print(statistics.median((lisvalueyesmanagment)))\n",
        "print(np.std(lisvalueyesmanagment))\n",
        "print(np.mean(lisvaluenomanagmentqqq))\n",
        "print(statistics.median((lisvaluenomanagmentqqq)))\n",
        "print(np.std(lisvaluenomanagmentqqq))\n",
        "print(np.mean(lisvalueyesmanagmentqqq))\n",
        "print(statistics.median((lisvalueyesmanagmentqqq)))\n",
        "print(np.std(lisvalueyesmanagmentqqq))\n",
        "print(areyouwinningson/1000)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IPeQK_oey71j",
        "outputId": "39758e82-fa96-4e9c-f8ef-51bec10319f9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "110.75354838309218\n",
            "112.48709605132933\n",
            "24.121425978822938\n",
            "113.71041045162147\n",
            "113.04719578413412\n",
            "28.503142245374093\n",
            "132.34535028240776\n",
            "126.81756257860658\n",
            "77.53625631251047\n",
            "149.0103381560641\n",
            "128.6526923265628\n",
            "113.58048343517882\n",
            "0.636\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.hist(lisvalueyesmanagmentqqq, bins =40)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "id": "iMR2Ta2eLduV",
        "outputId": "2a17ba9a-2a4e-4534-c0fd-9262bfe8bda1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.hist(lisvalueyesmanagment, bins = 40)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "id": "4WTPVhJVMYty",
        "outputId": "f0ebaa9e-a70c-4696-e248-f3d9696d980c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}